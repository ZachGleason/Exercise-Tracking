import * as React from 'react';
import { AnyObject } from '@gilbarbara/types';
import { Instance, Placement } from '@popperjs/core';
import { ApplyStylesModifier } from '@popperjs/core/lib/modifiers/applyStyles';
import { ArrowModifier } from '@popperjs/core/lib/modifiers/arrow';
import { ComputeStylesModifier } from '@popperjs/core/lib/modifiers/computeStyles';
import { EventListenersModifier } from '@popperjs/core/lib/modifiers/eventListeners';
import { FlipModifier } from '@popperjs/core/lib/modifiers/flip';
import { HideModifier } from '@popperjs/core/lib/modifiers/hide';
import { OffsetModifier } from '@popperjs/core/lib/modifiers/offset';
import { PopperOffsetsModifier } from '@popperjs/core/lib/modifiers/popperOffsets';
import { PreventOverflowModifier } from '@popperjs/core/lib/modifiers/preventOverflow';
import { PartialDeep, RequireExactlyOne, ValueOf } from 'type-fest';
import { STATUS } from './literals';
export declare type Action = 'open' | 'close';
export declare type HandlerFunction<T = HTMLElement> = (event: React.SyntheticEvent<T>) => void;
export declare type PlacementOptions = Placement | 'center';
export declare type SelectorOrElement = string | null | HTMLElement;
export declare type Statuses = ValueOf<typeof STATUS>;
export interface LogOptions {
    data: AnyObject | any[];
    debug?: boolean;
    title: string;
    warn?: boolean;
}
export interface RenderProps {
    closeFn: HandlerFunction;
}
export interface BaseProps {
    autoOpen?: boolean;
    callback?: (action: Action, props: Props) => void;
    children?: React.ReactNode;
    /**
     * A React element or function to be used as the custom UI for the Floater.
     * The prop closeFloater will be available in your component.
     */
    component: React.FunctionComponent<RenderProps> | React.ReactElement;
    content: React.ReactNode;
    debug?: boolean;
    disableFlip?: boolean;
    disableHoverToClick?: boolean;
    event?: 'click' | 'hover';
    eventDelay?: number;
    footer?: React.ReactNode;
    getPopper?: (popper: Instance, origin: 'floater' | 'wrapper') => void;
    hideArrow?: boolean;
    id?: string;
    modifiers?: PopperModifiers;
    offset?: number;
    open?: boolean;
    placement?: PlacementOptions;
    portalElement?: SelectorOrElement;
    showCloseButton?: boolean;
    style?: React.CSSProperties;
    styles?: PartialDeep<Styles>;
    target?: SelectorOrElement;
    title?: React.ReactNode;
    wrapperOptions?: {
        offset?: number;
        placement?: Placement;
        position?: boolean;
    };
}
export declare type Props = RequireExactlyOne<BaseProps, 'content' | 'component'>;
export interface State {
    currentPlacement: PlacementOptions;
    positionWrapper: boolean;
    status: Statuses;
    statusWrapper: Statuses;
}
export interface CustomComponent {
    children?: React.ReactNode;
    closeFn: HandlerFunction;
}
export interface PopperModifiers {
    applyStyles?: Partial<ApplyStylesModifier>;
    arrow?: Partial<ArrowModifier>;
    computeStyles?: Partial<ComputeStylesModifier>;
    eventListeners?: Partial<EventListenersModifier>;
    flip?: Partial<FlipModifier>;
    hide?: Partial<HideModifier>;
    offset?: Partial<OffsetModifier>;
    popperOffsets?: Partial<PopperOffsetsModifier>;
    preventOverflow?: Partial<PreventOverflowModifier>;
}
export interface Styles {
    arrow: React.CSSProperties & {
        length: number;
        spread: number;
    };
    close: React.CSSProperties;
    container: React.CSSProperties;
    content: React.CSSProperties;
    floater: React.CSSProperties;
    floaterCentered: React.CSSProperties;
    floaterClosing: React.CSSProperties;
    floaterOpening: React.CSSProperties;
    floaterWithAnimation: React.CSSProperties;
    floaterWithComponent: React.CSSProperties;
    footer: React.CSSProperties;
    options: {
        zIndex: number;
    };
    title: React.CSSProperties;
    wrapper: React.CSSProperties;
    wrapperPosition: React.CSSProperties;
}
declare global {
    interface Window {
        ReactFloaterDebug?: boolean;
    }
}
